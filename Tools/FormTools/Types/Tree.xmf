parserImport XOCL;
parserImport Parser::BNF;

import Tools;
import Menus;
import FormTools;
import FormEvents;
import Types;

context Types

// Class deployed by Tony Clark on Mon Feb 28 21:25:01 GMT 2005

@Class Tree extends FormElement

  @Attribute nodes    : Seq(TreeElement) (+,-,?) end
  @Attribute editable : Boolean          (?,!)   end
  
  @Constructor(name,editable)
    self.setName(name)
  end
  
  @Grammar extends FormElement.grammar
  
    Tree ::= name = EName patts = PosAtts natts = NamedAtts nodes = Exp* {
    
      [| let treeType = <nodes->iterate(n exp = [| Tools::FormTools::Types::Tree(<name>) |] | [| <exp>.add(<n>) |])> 
         in treeType.setEditable(not <OCL::BoolExp(patts->includes("readonly"))>);
            treeType.setMinWidth(<OCL::IntExp(FormElement::lookup(natts,"minWidth",0))>);
            treeType.setMaxWidth(<OCL::IntExp(FormElement::lookup(natts,"maxWidth",9999))>);
            treeType.setMinHeight(<OCL::IntExp(FormElement::lookup(natts,"minHeight",0))>);
            treeType.setMaxHeight(<OCL::IntExp(FormElement::lookup(natts,"maxHeight",9999))>);
            treeType.setPadLeft(<OCL::IntExp(FormElement::lookup(natts,"padLeft",0))>);
            treeType.setPadRight(<OCL::IntExp(FormElement::lookup(natts,"padRight",0))>);
            treeType.setPadTop(<OCL::IntExp(FormElement::lookup(natts,"padTop",0))>);
            treeType.setPadBottom(<OCL::IntExp(FormElement::lookup(natts,"padBottom",0))>);
            treeType.setLayout(<OCL::StrExp(FormElement::filterLayout(patts))>);
            treeType
         end
      |]
    }.
    
    Label ::= Name | Str.
    
    Action ::= Name | Str.
    
  end
  
  @Operation add(element)
    @TypeCase(element)
      TreeElement do
        self.addToNodes(element)
      end
      Menu do
        self.menu := element
      end
    end
  end
  
  @Operation bind(env)
    env.bind(name.toString(),self)
  end
  
  @Operation merge(inherited)
  
    // To merge a container of tree nodes, add in the new elements
    // and merge the elements with the same name. Also merge the menus
    // of the two elements.
    
    super(inherited);
    @For inheritedElement in inherited.nodes() do
      @Find(localElement,self.nodes())
        when localElement.name().toString() = inheritedElement.name().toString()
        do localElement.merge(inheritedElement)
        else self.add(inheritedElement)
      end
    end
  end
  
  @Operation new(parent,path,env,tool)
    let tree = Forms::Tree(0,0,0,0,editable);
        path = path + Seq{name.toString()};
        env = nodes->iterate(n env = env | n.bind(env))
    in tree.setType(self);
       parent.add(tree);
       menu.setGlobalMenu(tree,tree,tool,path,Set{self,tool});
       @For nodeType in nodes do
         nodeType.new(tree,path,env,tool)
       end;
       tree
    end
  end
  
  @Operation nodeType(name:String):TreeNode
    @Find(node,nodes)
      when node.name().toString() = name
      else null
    end
  end
  
  @Operation underlyingTypes(env):Set(TreeNode)
    nodes->iterate(nodeType T = Set{} | T + nodeType.underlyingTypes(env))
  end
  
  @Operation underlyingNodeTypes(env):Seq(TreeNode)
    nodes->iterate(node T = Seq{} | T + node.underlyingTypes(env))
  end
  
end