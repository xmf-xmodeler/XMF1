parserImport XOCL;
parserImport Parser::BNF;

import Tools;
import FormTools;
import Types;

context Types

// Class deployed by Tony Clark on Mon Feb 28 21:25:01 GMT 2005

@Class Box extends FormContainer

  @Grammar extends FormElement.grammar
  
    Box ::= name = EName patts = PosAtts natts = NamedAtts types = Exp* {
    
      [| let boxType = <types->iterate(t e = [| Tools::FormTools::Types::Box(<name>) |] | [| <e>.add(<t>) |])>
         in boxType.setMinWidth(<OCL::IntExp(FormElement::lookup(natts,"minWidth",0))>);
            boxType.setMaxWidth(<OCL::IntExp(FormElement::lookup(natts,"maxWidth",9999))>);
            boxType.setMinHeight(<OCL::IntExp(FormElement::lookup(natts,"minHeight",0))>);
            boxType.setMaxHeight(<OCL::IntExp(FormElement::lookup(natts,"maxHeight",9999))>);
            boxType.setPadLeft(<OCL::IntExp(FormElement::lookup(natts,"padLeft",0))>);
            boxType.setPadRight(<OCL::IntExp(FormElement::lookup(natts,"padRight",0))>);
            boxType.setPadTop(<OCL::IntExp(FormElement::lookup(natts,"padTop",0))>);
            boxType.setPadBottom(<OCL::IntExp(FormElement::lookup(natts,"padBottom",0))>);
            boxType.setLayout(<OCL::StrExp(FormElement::filterLayout(patts))>);
            boxType.setContentLayout(<OCL::StrExp(FormContainer::filterContentLayout(patts))>);
            boxType
         end
      |]
    }.
    
  end
  
  @Operation new(parent,path,env,tool)
    let box = Forms::Box(0,0,0,0);
        env = elements->iterate(e env = env | e.bind(env))
    in box.setType(self);
       @For type in elements do
         type.new(box,path + Seq{name.toString()},env,tool)
       end;
       parent.add(box);
       menu.setGlobalMenu(box,box,tool,path + Seq{name.toString()},Set{self,tool});
       box
    end
  end

end