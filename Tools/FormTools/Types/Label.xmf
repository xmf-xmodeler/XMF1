parserImport XOCL;
parserImport Parser::BNF;

import Tools;
import FormTools;
import Types;

context Types

// Class deployed by Tony Clark on Mon Feb 28 21:25:01 GMT 2005

@Class Label extends FormElement

  @Attribute text : String (?,!) end
  
  @Constructor(name,text) 
    self.setName(name)
  end
  
  @Grammar extends FormElement.grammar
  
    Label ::= name = EName patts = PosAtts label = Label natts = NamedAtts defs = Exp* {
    
      [| let labelType = <defs->iterate(t e = [| Tools::FormTools::Types::Label(<name>) |] | [| <e>.add(<t>) |])>
         in labelType.setText(<label>);
            labelType.setMinWidth(<OCL::IntExp(FormElement::lookup(natts,"minWidth",0))>);
            labelType.setMaxWidth(<OCL::IntExp(FormElement::lookup(natts,"maxWidth",9999))>);
            labelType.setMinHeight(<OCL::IntExp(FormElement::lookup(natts,"minHeight",0))>);
            labelType.setMaxHeight(<OCL::IntExp(FormElement::lookup(natts,"maxHeight",9999))>);
            labelType.setPadLeft(<OCL::IntExp(FormElement::lookup(natts,"padLeft",0))>);
            labelType.setPadRight(<OCL::IntExp(FormElement::lookup(natts,"padRight",0))>);
            labelType.setPadTop(<OCL::IntExp(FormElement::lookup(natts,"padTop",0))>);
            labelType.setPadBottom(<OCL::IntExp(FormElement::lookup(natts,"padBottom",0))>);
            labelType.setLayout(<OCL::StrExp(FormElement::filterLayout(patts))>);
            labelType
         end
      |]
    }.
    
    Label ::= n = Name { OCL::StrExp(n) } | s = Str { OCL::StrExp(s) } | '<' e = Exp '>' { e }.
    
  end
  
  @Operation new(parent,path,env,tool)
   
     // Create and add the label to the parent. Do not new the
     // label as the parent may not have been newed yet. Return
     // the new label.
     
     let label = Forms::Label(0,0,0,0,text)
     in label.setType(self);
        parent.add(label);
        menu.setGlobalMenu(label,label,tool,path + Seq{name.toString()},Set{self,tool});
       label
     end
   end
  
end