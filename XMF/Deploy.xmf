parserImport XOCL;

// Deploy any package as a Java package. The Java package contains
// a Java class for each class in the XMF package. A default strategy
// is used to map each XMF class to a Java class.

import IO;

context Package
  @Operation deployJava(root:String)
    self.deployJava(root,self.name())
  end
  
context Package 
  @Operation deployJava(root:String,name:String)
    let deployDir = root + "/" + name
    in if deployDir.mkDir()
       then 
         self.deployJavaClasses(deployDir,name);
         self.deployJavaFactory(deployDir,name)
       else
         xmf.warning("Cannot create directory " + deployDir)
       end
    end
  end
  
context Package
  @Operation deployJavaClasses(deployDir:String,name:String)
    @For class in classes do
      class.deployJava(deployDir,self,name)
    end
  end
  
context Package
  @Operation deployJavaFactory(deployDir:String,name:String)
    null
  end
  
context Class
  @Operation deployJava(deployDir:String,package:Package,pname:String)
    @WithOpenFile(fout -> deployDir + "/" + name + ".java")
      format(fout,"package ~S;~%~%",Seq{pname});
      if parents->select(p | package.classes->includes(p))->isEmpty
      then format(fout,"public class ~S {~%~%",Seq{name})
      else format(fout,"public class ~S extends ~S {~%~%",Seq{name,parents->sel.name})
      end;
      format(fout," // Attributes...~%~%");
      @For attribute in self.javaAttributes(package) do
        attribute.deployJava(fout,package)
      end;
      format(fout,"~%");
      format(fout," // Accessors...~%~%");
      @For attribute in self.javaAttributes(package) do
        attribute.deployAccessor(fout,package)
      end;
      format(fout,"~%");
      format(fout," // Updaters...~%~%");
      @For attribute in self.javaAttributes(package) do
        attribute.deployUpdater(fout,package)
      end;
      format(fout,"~%");
      format(fout," // Display...~%~%");
      format(fout,"  public String toString() {~%");
      format(fout,"    String s = \"~S(\";~%",Seq{name});
      @For attribute in self.javaAttributes(package) do
        format(fout,"    s = s + ~S;~%",Seq{attribute.name});
        if not isLast then format(fout,"    s = s + \",\";~%") end
      end;
      format(fout,"    return s + \")\";~%");
      format(fout,"  }~%");
      format(fout,"}~%")
    end
  end
  
context Class
  @Operation javaAttributes(package:Package)
    self.allAttributes()->select(a | 
      let type = a.underlyingType()
      in package.classes->includes(type) or
         XCore.classes->includes(type) or
         type.isKindOf(DataType)
      end)
  end
  
context Attribute
  @Operation deployJava(out:OutputChannel,package:Package)
    format(out,"  private ~S ~S;~%",Seq{type.javaTypeName(package),name})
  end
  
context Attribute 
  @Operation deployAccessor(out:OutputChannel,package:Package)
    @Case type of
      Set(T) do
        if T.isKindOf(DataType)
        then format(out,"  public ~S[] ~S() { return ~S; }~%",Seq{T.javaTypeName(package),name,name})
        else format(out,"  public java.util.Vector ~S() { return ~S; }~%",Seq{name,name})
        end
      end
      Seq(T) do
        if T.isKindOf(DataType)
        then format(out,"  public ~S[] ~S() { return ~S; }~%",Seq{T.javaTypeName(package),name,name})
        else format(out,"  public java.util.Vector ~S() { return ~S; }~%",Seq{name,name})
        end
      end
      else format(out,"  public ~S ~S(){ return ~S; }~%",Seq{type.javaTypeName(package),name,name})
    end
  end
  
context Attribute
  @Operation deployUpdater(out:OutputChannel,package:Package)
    let uname = name.toString().upperCaseInitialLetter()
    in @Case type of
        Set(T) do
          if T.isKindOf(DataType)
          then format(out,"  public void set~S(~S value) { this.~S = value; }~%",Seq{uname,T.javaTypeName(package),name})
          else format(out,"  public void set~S(java.util.Vector value) { this.~S = value; }~%",Seq{uname,name})
          end
        end
        Seq(T) do
          if T.isKindOf(DataType)
          then format(out,"  public void set~S(~S value) { this.~S = value; }~%",Seq{uname,T.javaTypeName(package),name})
          else format(out,"  public void set~S(java.util.Vector value) { this.~S = value; }~%",Seq{uname,name})
          end
        end
        else format(out,"  public void set~S(~S value){ this.~S = value; }~%",Seq{uname,type.javaTypeName(package),name})
       end
    end
  end
  
context Classifier
  @Operation javaTypeName(package:Package):String
    @Case self of
      Set(T) do
        if T.isKindOf(DataType)
        then T.javaTypeName(package) + "[]"
        else "java.util.Vector"
        end
      end
      Seq(T) do
        if T.isKindOf(DataType)
        then T.javaTypeName(package) + "[]"
        else "java.util.Vector"
        end
      end
      [Integer] do
        "int"
      end
      [Boolean] do
        "boolean"
      end
      [String] do
        "String"
      end
      [Float] do
        "double"
      end
      [Table] do
        "java.util.Hashtable"
      end
      else 
        if package.classes->includes(self)
        then name
        else "Object"
        end
    end
  end
     

      