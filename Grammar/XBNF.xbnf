// This file contains the XBNF grammar defined in XBNF.
// Note that each clause name is prefixed by XBNF_ to prevent
// confusion with the XOCL grammar that it extends.

XBNF_Action ::= 
  '{' exp = Exp '}' 
  { PreAction(exp) }.
    
XBNF_Atom ::= 
  XBNF_Action    | 
  XBNF_Literal   | 
  XBNF_Call      | 
  '(' XBNF_Disjunction ')'.
  
XBNF_Binding ::= 
  name = Name '=' atom = XBNF_Sequence { 
    And(atom,Bind(name)) 
  }.
  
XBNF_Call ::= 
  name = Name { Call(name) }.
  
XBNF_Clause ::= 
  name = Name '::=' body = XBNF_Disjunction '.' { Clause(name,body) }. 
  
XBNF_Conjunction ::= 
  elements = XBNF_Element+ { 
   elements->tail->iterate(e conj = elements->head | 
     And(conj,e)) 
  }. 
  
XBNF_Disjunction ::= 
  element = XBNF_Conjunction [ 
    '|' rest = XBNF_Disjunction element = { Or(element,rest) } 
  ] 
  { element }.
   
XBNF_Element ::= 
  XBNF_Optional  | 
  XBNF_Binding   | 
  XBNF_Sequence.
  
Grammar ::= 
  parents = XBNF_GrammarParents
  imports = XBNF_GrammarImports
  clauses = XBNF_Clause* { Grammar(parents,clauses->asSet,"",imports) }.
  
XBNF_GrammarImports ::= 
  'import' class = Exp classes = (',' Exp)* { Seq{class | classes} } |
  { Seq{} }.
  
XBNF_GrammarParents ::= 
  'extends' parent = Exp parents = (',' Exp)* { parents->asSet->including(parent) } |
  { Set{} }.

XBNF_Literal ::= 
  'Char'       { (Parser::BNF.getElement("Char"))() }     |
  'Str'        { (Parser::BNF.getElement("Str"))() }      | 
  'Terminal'   { (Parser::BNF.getElement("Term"))() }     |
  'Token'      { (Parser::BNF.getElement("Tok"))() }      |
  'Int'        { (Parser::BNF.getElement("Int"))() }      | 
  'Name'       { (Parser::BNF.getElement("Name"))() }     | 
  'EOF'        { (Parser::BNF.getElement("EOF"))() }      | 
  '!'          { (Parser::BNF.getElement("Cut"))() }      |
  '@'          { (Parser::BNF.getElement("At"))() }       |
  'ImportAt'   { (Parser::BNF.getElement("ImportAt"))() } |
  terminal = Terminal
   { (Parser::BNF.getElement("Terminal"))(terminal) }.

XBNF_Optional ::= 
  '[' opt = XBNF_Disjunction ']'
  { Opt(opt) }.
  
XBNF_Path ::= name = Name names = ('::' Name)* { Seq{name | names} }.
  
XBNF_TypeCheck ::=
  element = XBNF_Atom [ ':' type = XBNF_Path element = { And(element,TypeCheck(type)) } ] { element }.
  
XBNF_Sequence ::= 
  element = XBNF_TypeCheck [ 
    '*' element = { StarCons(element) } | 
    '+' element = { PlusCons(element) } ] 
    { element }.