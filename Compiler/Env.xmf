parserImport XOCL;

import Compiler; 

context Compiler

    @Class Env

      // An environment is used to keep track of variables occurring in a program as it
      // is compiled.

      @Attribute vars : Seq(Var) end
      
      @Operation allocateLocals(names:Seq(String),nextLocal:Integer)
        if names->isEmpty
        then self
        else self.consLocal(names->at(0),nextLocal).allocateLocals(names->drop(1),nextLocal + 1)
        end
      end
      
      @Operation consLocal(name:String,offset:Integer)
        Env(Seq{Local(name,offset) | vars})
      end
      
      @Operation consNameSpaceRef(name:String,contour:Integer)
        let vars = vars->reject(v | v.name = name)
        in Env(Seq{NameSpaceRef(name,contour) | vars})
        end 
      end
      
      @Operation deleteLocals()
        Env(vars->reject(v | v.isKindOf(Local)))
      end
      
      @Operation init(args):Element
        let vars = if args->isEmpty then Seq{} else args->at(0) end
        in self.vars := vars
        end
      end
      
      @Operation incNameSpaceRefs()
        Env(vars->collect(var |
          if var.isKindOf(NameSpaceRef)
          then var.inc()
          else var
          end))
      end
      
      @Operation globals():Seq(String)
        vars->select(v | v.isKindOf(Global))->collect(v | v.name)
      end
      
      @Operation isDynamic(name:String):Boolean
        // Returns true when a reference to the supplied name
        // results in the production of a Dynamic instruction.
        not vars->exists(v | v.name = name) and
        not name = "null"
        and not self.isKernelRef(name)
      end
      
      @Operation isGlobal(name:String):Boolean
        self.globals()->includes(name)
      end
      
      @Operation isKernelRef(name:String)
        let kernel = "Kernel_"
        in if name->size > kernel->size 
           then
             let index = 0;
                 isKernelRef = true
             in @While index < kernel->size and isKernelRef do
                  isKernelRef := name->at(index) = kernel->at(index);
                  index := index + 1
                end;
                isKernelRef
             end
           else false
           end
         end
      end

      @Operation isLocal(name:String):Boolean
        @Find(var,vars)
          when var.isKindOf(Local) andthen var.name = name
          do true
          else false
        end
      end
      
      @Operation localIndex(name:String):Integer
        if not vars->exists(v | v.name = name and v.isKindOf(Local))
        then self.error("no local named " + name)
        else vars->select(v | v.name = name)->head.offset
        end
      end
      
      @Operation locals():Seq(String)
        vars->select(v | v.isKindOf(Local))->collect(v | v.name)
      end

      @Operation maxLocal():Integer
        let maxLocals = 0
        in @For var in vars do
             if var.isKindOf(Local)
             then maxLocals := maxLocals + 1
             end
           end;
           maxLocals
        end 
      end
      
      @Operation newFrame():Env
        Env(vars->collect(v |
          if v.isKindOf(Global)
          then Global(v.name,v.frame + 1,v.offset)
          else v
          end))
      end

      @Operation newGlobals(names:Seq(String)):Env
        if names->isEmpty
        then self
        else
          let globals = 0.to(names->size - 1)->collect(i | Global(names->at(i),0,i))
          in Env(globals + vars)
          end
        end
      end
      
      @Operation newLocals(names:Seq(String))
        if names->isEmpty
        then self
        else
          let locals = 0.to(names->size - 1)->collect(i | Local(names->at(i),i))
          in Env(locals + vars)
          end
        end
      end
      
      @Operation refs(names:Set(String))
        names->collect(name | self.ref(name))->asSeq->flatten
      end

      @Operation ref(name:String)
        @Find(var,vars)
          when var.name = name
          do var.ref()
          else 
            if name = "null"
            then Seq{Instrs::Null()}
            elseif self.isKernelRef(name)
            then Seq{Instrs::SymbolValue(Symbol(name))}
            else Seq{Instrs::Dynamic(Symbol(name))}
            end
        end
      end
       
      @Operation ref(name:String,lineCount:Integer,charCount:Integer)
        // Save the source position...
        if self.isLocal(name) andthen self.localIndex(name) <= 255 
        then Seq{Instrs::LocalRefPos(name,self.localIndex(name),lineCount)}
        elseif self.isDynamic(name) 
        then Seq{Instrs::DynRefPos(Symbol(name),lineCount)}
        else Seq{Instrs::SourcePos(lineCount,charCount)} + self.ref(name) 
        end
      end

      @Operation setLocalsCode(names:Seq(String))
        if names->isEmpty
        then Seq{}
        else self.setLocalCode(names->at(0)) + self.setLocalsCode(names->drop(1))
        end
      end

      @Operation setLocalCode(name:String)
      
        // Used to generate the code for let x = v, get rid of the value
        // since the binding does not produce a value.
        
        Seq{Instrs::SetLocPop(name,self.localIndex(name))}
      end

      @Operation setVarCode(name:String)
      
        // Generate code for x := v. This expression produces a value
        // so don't pop it off the stack just yet...
        
        if self.isLocal(name)
        then Seq{Instrs::SetLocal(name,self.localIndex(name))}
        elseif self.isGlobal(name)
        then Seq{Instrs::SetGlobal(name,self.globalFrame(name),self.globalOffset(name))}
        else self.error(":= can only be used to set locals or globals (try using self.var): " + name + " " + self.toString())
        end
      end
      
      @Operation globalFrame(name:String):Integer
        if not vars->exists(v | v.name = name and v.isKindOf(Global))
        then self.error("no global named " + name)
        else vars->select(v | v.isKindOf(Global) and v.name = name)->sel.frame
        end
      end
      
      @Operation globalOffset(name:String):Integer
        if not vars->exists(v | v.name = name and v.isKindOf(Global))
        then self.error("no global named " + name)
        else vars->select(v | v.isKindOf(Global) and v.name = name)->sel.offset
        end
      end
      
      @Operation toString():String
        "Env(" + vars.toString() + ")"
      end
      
     end