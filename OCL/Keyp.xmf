parserImport XOCL;

import OCL;

context OCL

  @Class Keyp
  
    @Doc
      A key pattern occurs in a keyword instantiation of the form C[x = M,...].
    end
    
    @Attribute name : String end
    @Attribute pattern : Pattern end
    
    @Constructor(name,pattern) ! end
    
    @Operation bind(value,target,env,imports)
      if value.isKindOf(Object)
      then 
        if value.hasStructuralFeature(name)
        then pattern.bind(value.get(name),target,env,imports)
        else throw PatternFailed(self,value)
        end
      else throw PatternFailed(self,value)
      end
    end
    
    @Operation lift():Performable
      [| OCL::Keyp(<StrExp(name)>,<pattern.lift()>) |]
    end
    
    @Operation matchCode(value:Performable,succ:Performable,fail:Performable):Performable
      let newVar = pattern.newVar()
      in [| if <value>.hasStructuralFeature(<StrExp(name)>)
            then 
              let <newVar> = <value>.<name>
              in <pattern.matchCode([| <value>.<name> |],succ,fail)>
              end
            else <fail>
            end
         |]
      end
    end
    
    @Operation needsBacktrack():Boolean
      pattern.needsBacktrack()
    end
    
    @Operation pprint(out)
      format(out,"~S = ",Seq{name});
      pattern.pprint(out)
    end
    
  end