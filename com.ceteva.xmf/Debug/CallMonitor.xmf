parserImport XOCL;

import Debug;
import IO;

context Debug

  @Class CallMonitor
  
    @Attribute table   : Table = Table(10)   end
    @Attribute start   : Time = Time()       end
    @Attribute finish  : Time = Time()       end
    @Attribute command : Performable         end
    
    @Constructor(command) end
    
    @Operation edit()
      let out = StringOutputChannel()
      in self.report(out);
         out.getString().edit()
      end
    end
    
    @Operation ensureEntry(op)
      if table.hasKey(op)
      then table.get(op)
      else
        table.put(op,OperationReport(op));
        table.get(op)
      end
    end
    
    @Operation report(out)
      let reports = table.values()->asSeq then
          byName = reports.qsort(@Operation(r1,r2) r1.op().name() < r2.op().name() end);
          byCalls = reports.qsort(@Operation(r1,r2) r1.calls() > r2.calls() end);
          byMem = reports.qsort(@Operation(r1,r2) r1.memoryUsed() > r2.memoryUsed() end)
      in format(out," Call Report~%");
         format(out," -----------~%~%");
         format(out,"  Generated by ~S~%",Seq{xmf.user()});
         format(out,"  On ~S~%",Seq{xmf.date()});
         format(out,"  For Command ~S~%",Seq{command.pprint()});
         format(out,"  Total Time:~S~%~%",Seq{finish - start});
         format(out," Calls Sorted By Name:~%~%");
         @For r in byName do
           r.report(out);
           format(out,"~%")
         end;
         format(out,"~%~% *----*----*----*----*----*----*----*----*----*----*----*-----*-----*-----*-----*~%~%");
         format(out," Calls Sorted By Number of Calls:~%");
         format(out," -------------------------------~%~%");
         @For r in byCalls do
           r.report(out);
           format(out,"~%")
         end;
         format(out,"~%~% *----*----*----*----*----*----*----*----*----*----*----*-----*-----*-----*-----*~%~%");
         format(out," Calls Sorted By Memory Usage:~%");
         format(out," --------------------------------------------~%");
         format(out," (* Note that this is only a guide. Memory  *)~%");
         format(out," (* usage is calculated as the total amount *)~%");
         format(out," (* recorded as being used between entry to *)~%");
         format(out," (* and exit from the operation. Note that  *)~%");
         format(out," (* garbage collection can cause anomalies  *)~%");
         format(out," (* in the calculated figures.              *)~%");
         format(out," --------------------------------------------~%~%");
         @For r in byMem do
           r.report(out);
           format(out,"~%")
         end
      end
    end 
    
    @Operation start()
      self.start := Time()
    end
    
    @Operation finish()
      self.finish := Time()
    end
    
  end