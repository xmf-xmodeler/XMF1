parserImport XOCL;

import Walkers;
import OCL;

context Walkers

  @Class Fix extends Walker
  
    // Run over the system and perform fixes.
  
    @Operation defaultWalk(e:Element,arg:Element):Element
      null
    end
    
    @Operation reWalk(v:Element,arg:Element):Element
      null
    end
    
    @Operation walkBoolean(b:Boolean,arg:Element):Element 
      null
    end
     
    @Operation walkInteger(i:Integer,arg:Element):Element 
      null
    end
    
    @Operation walkNull(arg:Element):Element 
      null
    end
     
    @Operation walkOperation (o:Operation,arg:Element):Element
      null
    end
    
    @Operation walkPreObject(o:Object,arg:Element)
      null
    end
    
    @Operation walkObject(o:Object,arg:Element):Element
       self.encounter(o);
       let class = o.of() then
           attributes = class.allAttributes();
           slots = o.getStructuralFeatureNames()
       in @For a in attributes do
           if slots->exists(s | s.toString() = a.name.toString())
           then self.walk(o.get(a.name),arg)
           else 
             let name = a.name.toString();
                 default = a.type.default();
                 init = a.init
             in format(stdout,"Adding missing slot ~S to a ~S~%",Seq{name,o.of().name()});
                if init = null
                then Kernel_addAtt(o,name,default)
                else Kernel_addAtt(o,name,init.invoke(o,Seq{}))
                end
             end
           end
         end
      end 
    end
     
    @Operation walkPostObject(o:Object,arg:Element)
      null
    end
    
    @Operation walkSeq(s:SeqOfElement,arg:Element):Element 
      if not s->isEmpty
      then 
        self.walk(s->head,arg);
        self.walk(s->tail,arg)
      end
    end
     
    @Operation walkSet(s:SetOfElement,arg:Element):Element 
      @For x in s do
        self.walk(x,arg)
      end
    end
    
    @Operation walkString(s:String,arg:Element):Element 
      null
    end
    
    @Operation walkSymbol(s:Symbol,arg:Element):Element 
      null
    end
    
    @Operation walkTable(t:Table,arg:Element):Element
      @For v inTableValues t do
        self.walk(v,arg)
      end
    end
    
    @Operation walkVector(v:Vector,arg:Element):Element
      @Count i from 0 to v.size() - 1 do
        self.walk(v.ref(i),arg)
      end
    end
    
  end
     