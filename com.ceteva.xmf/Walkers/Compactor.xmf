parserImport XOCL;

import Walkers;

context Walkers

  @Class Compactor extends Walker
  
    @Attribute strings : Table = Table(100) end  // Strings encountered.
  
    @Operation defaultWalk(e:Element,arg:Element):Element
      e
    end
    
    @Operation reWalk(v:Element,arg:Element):Element
      v
    end
    
    @Operation walkBoolean(b:Boolean,arg:Element):Element 
      b
    end
     
    @Operation walkInteger(i:Integer,arg:Element):Element 
      i
    end
    
    @Operation walkNull(arg:Element):Element 
      null
    end
     
    @Operation walkOperation (o:Operation,arg:Element):Element
      if o.isKindOf(CompiledOperation)
      then self.walkCompiledOperation(o,arg)
      else o
      end
    end
    
    @Operation walkCompiledOperation(o:CompiledOperation,arg:Element):Element
      let codeBox = o.codeBox() then
          constants = codeBox.constants();
          globals = o.globals()
      in codeBox.setConstants(self.walk(constants,arg));
         o.setGlobals(self.walk(globals,arg));
         o
      end
    end
    
    @Operation walkPreObject(o:Object,arg:Element)
      null
    end
     
    @Operation walkPostObject(o:Object,arg:Element)
      o
    end
    
    @Operation walkSeq(s:SeqOfElement,arg:Element):Element 
      if not s->isEmpty
      then
        s->head := self.walk(s->head,arg);
        s->tail := self.walk(s->tail,arg)
      end;
      s
    end
     
    @Operation walkSet(s:SetOfElement,arg:Element):Element 
      @For x in s do
        self.walk(x,arg)
      end;
      s
    end
     
    @Operation walkSlot(o:Object,s:String,arg:Element)
      o.set(s,self.walk(o.get(s),arg))
    end
    
    @Operation walkString(s:String,arg:Element):Element 
      if strings.hasKey(s)
      then strings.get(s)
      else 
        strings.put(s,s);
        s
      end
    end
    
    @Operation walkSymbol(s:Symbol,arg:Element):Element
      s
    end
    
    @Operation walkTable(t:Table,arg:Element):Element
      @For key in t.keys() do
        let value = t.get(key);
            newKey = self.walk(key,arg) then
            newValue = self.walk(value,arg)
        in t.put(newKey,newValue);
           if newKey <> key then t.remove(key) end
        end
      end;
      t
    end
    
    @Operation walkVector(v:Vector,arg:Element):Element
      @Count i from 0 to v.size() - 1 do
        v.put(i,self.walk(v.ref(i),arg))
      end;
      v
    end
     
  end
     