parserImport XOCL;

import OCL;

context BinExp
  @Operation eval(target,env,imports) 
    @Case binOp of
      "andthen" do
        [| if <left> then <right> else false end |].eval(target,env,imports)
      end
      "orelse" do
        [| if <left> then true else <right> end |].eval(target,env,imports)
      end
      else
        let v1 = left.eval(target,env,imports);
            v2 = right.eval(target,env,imports)
        in @Case binOp of
              "+"        do v1 + v2 end
              "-"        do v1 - v2 end
              "*"        do v1 * v2 end
              "/"        do v1 / v2 end
              "and"      do v1 and v2 end
              "or"       do v1 or v2 end
              ">"        do v1 > v2 end
              "<"        do v1 < v2 end
              "<="       do v1 <= v2 end
              ">="       do v1 >= v2 end
              "="        do v1 = v2 end
              "<>"       do v1 <> v2 end
              "implies"  do v1 implies v2 end
              else       v1.send(binOp,Seq{v2})
            end
         end
    end
  end
  