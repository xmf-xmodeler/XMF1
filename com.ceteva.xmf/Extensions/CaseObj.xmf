parserImport XOCL;
parserImport Parser::BNF;

import OCL;
 
context XOCL

  @Class CaseObj
  
    @Doc
      An object case expression is used to dispatch over keyword constructor
      argument patterns of the form k[s1,s2,...,sn] where k is the most
      specific classifier of the object and the si are names of slots of the
      object. Matching binds the slot names to the slot values.
    end
    
    @Grammar extends OCL::OCL.grammar
    
      CaseObj ::= o = Exp 'of' arms = CaseObjArm* default = Default {
      
        [| let caseObj = <o>
           in <arms->iterate(arm e = default |
                let type = arm->at(0);
                    slots = arm->at(1);
                    body = arm->at(2)
                in [| if caseObj.of() = <type>
                      then 
                        <slots->iterate(slot b = body |
                          [| let <slot> = caseObj.<slot> in <b> end |])>
                      else <e>
                      end
                   |]
                end)>
           end
        |]
      }.
      
      CaseObjArm ::= type = Exp '[' slots = CaseObjSlots ']' 'do' body = Exp 'end' {
      
        Seq{type,slots,body}
        
      }.
      
      CaseObjSlots ::= slot = Name slots = (',' Name)* { Seq{slot | slots } } | { Seq{} }.
      
      Default ::= 'else' Exp | { [| caseObj.error("No type matched in CaseObj.") |] }.
      
    end
    
  end   
    
    