parserImport XOCL;

import Stacks;

context Stacks

  @Class Stack
  
    @Doc
      A standard LIFO stack. The stack grows to accommodate
      elements as they are added.
    end
  
    @Attribute elements : Vector = Vector(100) end
    @Attribute index    : Integer              end 
    
    @Operation asSeq()
      let s = Seq{};
          i = index  - 1
      in @While i >= 0 do
           s := Seq{elements.ref(i) | s};
           i := i - 1
         end;
         s
      end
    end
    
    @Operation expand()
      let newElements = Vector(elements.size() * 2)
      in newElements.copyInto(elements);
         self.elements := newElements
      end
    end
    
    @Operation empty()
      self.index := 0
    end
    
    @Operation indexOf(e)
      let i = 0;
          found = false
      in @While i < elements.size() and not found do
            if elements.ref(i) = e 
            then found := true
            else i := i + 1 
            end
         end;
         if found
         then i
         else (0-1)
         end
      end
    end
    
    @Operation isEmpty():Boolean
      index = 0
    end
    
    @Operation isFull():Boolean
      elements.size() = index
    end
    
    @Operation pop()
      if self.isEmpty()
      then throw StackUnderflow(self)
      else 
        self.index := index - 1;
        elements.ref(index)
      end
    end
    
    @Operation push(e)
      if self.isFull() 
      then self.expand()
      end;
      elements.put(index,e);
      self.index := index + 1;
      self
    end
    
    @Operation ref(index)
      elements.ref(index)
    end
    
    @Operation put(index,e)
      elements.put(index,e)
    end
    
    @Operation size():Integer
      elements.size()
    end
    
    @Operation top()
      if self.isEmpty()
      then throw StackUnderflow(self)
      else elements.ref(index - 1)
      end
    end
    
    @Operation topIndex():Integer
      index - 1
    end
    
  end
      