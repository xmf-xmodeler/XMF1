parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import DiagramsMapping;
import Menus;
import ClassMapping;
import MappingDiagrams;
import MappingMapping;

context MappingMapping

  @Class MapXNode extends DiagramsMapping::ElementXNode, RightClickableProxy
  
    @Attribute map  : XMap::Map   end
    @Attribute node : MapNode (?) end
    
    @Constructor(map,node,owner)
      self.setHotLoad(true);
      self.checkDaemons();
      self.setGlobalMenu(node,Set{map.of(),node.of()})
    end

    @Operation buildGlobalMenu(rightClickable)      
      let globalMenu = rightClickable.globalMenu(false);
          type = map.of();
          clientType = rightClickable.of()
      in
        xmf.menuRegistryHandler().buildGlobalMenu(globalMenu,type,clientType,
                                                  MapXNode::proxyElementTarget);
        globalMenu.add(MenuAction("Delete from Diagram Only",RightClickableProxy::proxyTarget,Seq{},DiagramsMapping::ElementXNode::deleteNodeFromDiagram));
        globalMenu.new();
        globalMenu
      end
    end

    @Operation proxyElementTarget()
      xmf.menuManager().getProxy(self).map
    end

    @Operation attributeAdded_MapXNode(map,slot,attribute)
      if not attribute.underlyingType().isKindOf(DataType)
      then owner.attributeAdded(attribute)
      end
    end
    
    @Operation attributeRemoved_MapXNode(map,slot,attribute)
      if not attribute.underlyingType().isKindOf(DataType)
      then owner.attributeRemoved(attribute)
      end
    end

    @Operation checkDaemons()
      super();
      self.checkNodeDaemons();
      self.checkMapDaemons()
    end
    
    @Operation checkNodeDaemons()
      @SlotValueChanged multi once   MapXNode::nodeNameChanged_MapXNode(node.name,"text") end
    end
    
    @Operation checkMapDaemons()
      @SlotValueChanged multi once   MapXNode::mapNameChanged_MapXNode(map,"name") end;
      @SlotValueChanged multi once + MapXNode::domainAttAdded_MapXNode(map,"domains") end;
      @SlotValueChanged multi once - MapXNode::domainAttRemoved_MapXNode(map,"domains") end;
      @SlotValueChanged multi once   MapXNode::rangeAttChanged_MapXNode(map,"range") end;
      @SlotValueChanged multi once + MapXNode::parentAdded_MapXNode(map,"parents") end;
      @SlotValueChanged multi once - MapXNode::parentRemoved_MapXNode(map,"parents") end;
      @SlotValueChanged multi once + MapXNode::attributeAdded_MapXNode(map,"attributes") end;
      @SlotValueChanged multi once - MapXNode::attributeRemoved_MapXNode(map,"attributes") end
    end

    @Operation domainAttAdded_MapXNode(package,slot,newDomain)
      owner.domainAdded(map,newDomain,node)
    end
    
    @Operation domainAttRemoved_MapXNode(package,slot,removedDomain)
      owner.domainRemoved(map,removedDomain)
    end

    @Operation hotLoaded()
      self.checkDaemons();
      self.setGlobalMenu(node,Set{map.of(),node.of()},false)
    end
    
    @Operation mapNameChanged_MapXNode(attribute,slot,newName,oldName)
      if node.name() <> newName.toString()
      then 
        node.setName(newName.toString())
      end
    end
    
    @Operation nodeNameChanged_MapXNode(attribute,slot,newName,oldName)
      if map.name.toString() <> newName
      then map.setName(newName)
      end
    end
    
    @Operation rangeAttChanged_MapXNode(attribute,slot,newValue,oldValue)
      owner.rangeChanged(map,newValue,node)
    end

    @Operation parentAdded_MapXNode(map,slot,parent)
      owner.parentAdded(map,parent)
    end
    
    @Operation parentRemoved_MapXNode(map,slot,parent)
      owner.parentRemoved(map,parent)
    end

    @Operation removeDaemons()
      super();
      map.removeDaemonsWithTarget(self,true);
      node.removeDaemonsWithTarget(self,true);
      node.name.removeDaemonsWithTarget(self,true)
    end

    @Operation element()
      map
    end

  end  
  