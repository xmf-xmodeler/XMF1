parserImport XOCL;

import Clients;
import Diagrams;

context Diagrams

  @Class Text extends Display
  
    @Bind textDimension = Table(10) end
  
    @Attribute text : String (?) end
    @Attribute font : String (?) end
    @Attribute editable : Boolean (?,!) end
    @Attribute underline : Boolean (?) end
    @Attribute italicise : Boolean (?) end
    @Attribute color : Color = static Color() (?,!) end
    
    @Constructor(id,text,x,y,editable) ! end
    
    @Constructor(text,x,y,editable) end
    
    @Constructor(text,x,y,editable,underline,italicise) end

    @Constructor(text,x,y,editable,underline,italicise,color) end
    
    @Constructor(text,x,y,editable,underline,italicise,color,font) end
    
    @Operation calculateSize()
      let d = 
        if Text::textDimension.hasKey(text) and self.font = ""
        then
          Text::textDimension.get(text)
        else
          let td = self.dimension()
          in
          
             // If there is no command interpreter then don't cache the text dimension
             // since it will not have been properly calculated
             
             if font = "" and self.hasCommandInterpreter()
             then Text::textDimension.put(text,td)
             end;
             td
          end
        end
      in
        self.setWidth(d->at(0));
        self.setHeight(d->at(1))
      end
    end
    
    @Operation dimension()
      // Returns the width and height as a pair.
      if owner <> null and self.hasCommandInterpreter()
      then 
        if font = ""
        then @Command(self) getTextDimension(self) end
        else self.dimensionWithFont()
        end
      else Seq{0,0}
      end 
    end
    
    @Operation dimensionWithFont()
      if owner <> null and self.hasCommandInterpreter()
      then @Command(self) getTextDimensionWithFont(self) end
      else Seq{0,0}
      end
    end
    
    @Operation editText()
      @Command(self) editText(self) end
    end
    
    @Operation expandHeight()
      // A text display component is already expanded.
      self
    end
    
    @Operation expandWidth()
      // A text display component is already expanded.
      self
    end
    
    @Operation maxHeight()
      self.calculateSize();
      height
    end
    
    @Operation maxWidth()
      self.calculateSize();
      width
    end
    
    @Operation minHeight()
      self.calculateSize();
      height
    end
    
    @Operation minWidth()
      self.calculateSize();
      width
    end
    
    @Operation move(x,y)
      @When self.x <> x or self.y <> y do
        self.x := x;
        self.y := y;
        @Command(self) moveCommand(self,x,y) end
      end
    end
    
    @Operation new(parent,setMenu) 
      self.setOwner(parent);
      @Command(self) newTextCommand(parent,self,self.text) end;
      self.setRightClickMenu();
      self.calculateSize();
      if setMenu
      then self.setRightClickMenu()
      end;
      self
    end
    
    @Operation packHeight()
      // A text display component is already packed.
      self.calculateSize()
    end
    
    @Operation packWidth()
      // A text display component is already packed.
      self.calculateSize()
    end
    
    @Operation preferenceChange()
      self.calculateSize();
      owner.resized(self)
    end
    
    @Operation renew(parent)
      @Command(self) newTextCommand(parent,self,self.text) end;
      self.renewHidden();
      self.setRightClickMenu();
      self.calculateSize();
      owner.resized(self);
      self
    end
    
    @Operation resize(width,height)
      @When self.width <> width or self.height <> height do
        @Command(self) resizeCommand(self,width,height) end;
        self.width := width;
        self.height := height
      end
    end
    
    @Operation textChanged(newText) 
      @Command(self) setTextCommand(self,newText) end;
      if self.text <> newText
      then self.text := newText
      end; // Avoid unnecessary daemon firing
      self.calculateSize();
      owner.resized(self)
    end
    
    @Operation setColor(color:Color)
      self.color := color;
      @Command(self) setColor(self,color) end
    end
    
    @Operation setFont(font:String)
      self.font := font;
      @Command(self) setFont(self,font) end
    end
    
    // use the following method for non-user interface level text changes
    // calls to this method cannot be undone
    
    @Operation setText(newText)
      @Command(self) setTextCommand(self,newText) end;
      if self.text <> newText
      then self.text := newText
      end; // Avoid unnecessary daemon firing
      self.calculateSize();
      owner.resized(self)
    end
    
    @Operation setItalicise(italicise)
      self.italicise := italicise;
      @Command(self) setItaliciseCommand(self,italicise) end
    end
    
    @Operation setUnderline(underline)
      self.underline := underline;
      @Command(self) setUnderlineCommand(self,underline) end
    end
    
    @Operation synchronise()
      let
        id = Seq{"identity",id};
        x = Seq{"x",x};
        y = Seq{"y",y};
        width = Seq{"width",width};
        height = Seq{"height",height};
        hidden = Seq{"hidden",hidden};
        shown = Seq{"shown",shown};
        text = Seq{"text",text};
        font = Seq{"font",font};
        editable = Seq{"editable",editable};
        underline = Seq{"underline",underline};
        italicise = Seq{"italicise",italicise} then
        attributes = Seq{id,x,y,width,height,hidden,shown,text,font,editable,underline,italicise}
      in
        // color ignored
        
        @Command(self) startElement("text",attributes) end;
        @Command(self) endElement("text") end
      end
    end
    
  end