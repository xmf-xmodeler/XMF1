parserImport XOCL;
parserImport XMap;

import Clients;
import Forms;
import XMap;
import PropertyEditors;
import PropertyEditorXCore;

context PropertyEditorXCore

  @Class ConstructorXForm extends ObjectXForm

    @Operation daemons_selfNamesChanged(e,slot,newValue,oldValue)
      self.form.setName("Properties - " + element.labelString());
      self.form.setTextOut("self",element);
      self.form.setTextOut("names",newValue);
      self.form.namesDisplay.field.element := newValue
    end

    @Operation daemons_sourceChanged(e,slot,newValue,oldValue)
      self.form.setTextOut("source",newValue)
    end

    @Operation daemons_ownerNameChanged(elementOwner,slot,newName,oldName)
      self.form.setName("Properties - " + element.labelString());
      self.form.setTextOut("self",element);
      self.form.setTextOut("owner",element.owner())
    end

    @Operation checkDaemons()

      @SlotValueChanged multi once ConstructorXForm::daemons_selfNamesChanged(element,"names") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ofNameChanged(element.of(),"name") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ofAttributesChanged(element.of(),"attributes") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ofParentsChanged(element.of(),"parents") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ownerChanged(element,"owner") end;
      @SlotValueChanged multi once ConstructorXForm::daemons_sourceChanged(element,"source") end;
      if element.owner() <> null then
        @SlotValueChanged multi once ConstructorXForm::daemons_ownerNameChanged(element.owner(),"name") end
      end;
      self
    end
    
    @Operation removeDaemons()
      self.removeClosingDaemon();
      element.removeDaemonsWithTarget(self,true);
      element.of().removeDaemonsWithTarget(self,true);
      if element.owner() <> null then
        element.owner().removeDaemonsWithTarget(self,true)
      end;
      self
    end

  end