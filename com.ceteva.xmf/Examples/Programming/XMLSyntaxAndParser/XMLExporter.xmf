// This file provides an example of using XOCL to
// construct an XML exporter for Component Models. 
// The code also makes use of domain specific extension
// to XOCL that support XML tag templates.

// To run the exporter, select a Component Model instance, 
// e.g. a snapshot or XTool and select Invoke Operations ... > exportXML()
// You can use the XML importer to read the instance back in.

parserImport XOCL;
parserImport XML::PrintXML;

import Components;
import IO;

context ComponentModel

  @Operation exportXML()
    let file = xmf.saveFile(xmf.projDir(),"*.xml")
    in if file <> ""
       then
         if not file.fileExists() orelse xmf.question("Overwrite " + file)
         then
           @Busy("Generating XML")
             @WithOpenFile(fout -> file)
                self.exportXML(fout)
             end
           end;
           xmf.message("Written " + self.toString() + " to " + file)
         else xmf.message("Deployment Cancelled")
         end
       else xmf.message("Deployment Cancelled")
       end
    end
  end

// Export a Component Model as an XML tag containing
// the results of turning its Components and Connectors 
// into XML.
context ComponentModel 
  @Operation exportXML(out:OutputChannel)
    @XML(out)
      <ComponentModel>
        @For component in components do
          component.exportXML(out)
        end;
        @For connector in connectors do
          connector.exportXML(out,self)
        end
      </ComponentModel>
    end
  end
  
context ComponentModel
  @Operation portId(port:Port):String
    @Find(component,components)
      when component.ports->includes(port)
      do component.name + ":" + port.name
      else self.error("Cannot find port " + port.toString())
    end
  end
  
context Component
  @Operation exportXML(out:OutputChannel)
    @XML(out)
      <Component name=name>
        @For port in ports do
          port.exportXML(out,self)
        end
      </Component>
    end
  end
  
context Port
  @Operation exportXML(out:OutputChannel,component:Component)
    let portId = component.name + ":" + name
    in @XML(out)
         <Port name=name type=type id=portId/>
       end
    end
  end
  
context Connector
  @Operation exportXML(out:OutputChannel,model:ComponentModel)
    let sourceId = model.portId(source);
        targetId = model.portId(target)
    in @XML(out)
         <Connector source=sourceId target=targetId/>
       end
    end
  end