parserImport XOCL;

context Root

  @Class XMF extends ObjectWithProperties
  
    // VM type tags...
  
    @Bind UNDEFINED      = 0  end             // Memory is initialised to undefined.
    @Bind ARRAY          = 1  end             // A fixed size indexed sequence of values.
    @Bind CODE           = 2  end             // A fixed size indexed sequence of instructions.
    @Bind INT            = 3  end             // A positive integer.
    @Bind STRING         = 4  end             // A fixed size indexed sequence of char-codes.
    @Bind CODEBOX        = 5  end             // Code + constants + globals.
    @Bind BOOL           = 6  end             // Either true or false.
    @Bind OBJ            = 7  end             // An object with fields.
    @Bind FUN            = 8  end             // A function.
    @Bind FOREIGNFUN     = 9  end             // A Java function.
    @Bind FOREIGNOBJ     = 10 end             // A Java object.
    @Bind FORWARD        = 11 end             // Used by the garbage collector.
    @Bind CONT           = 12 end             // A continutation (stack copy).
    @Bind CONS           = 15 end             // A cons pair.
    @Bind NIL            = 16 end             // The empty list.
    @Bind SYMBOL         = 17 end             // Symbolic names.
    @Bind SET            = 18 end             // A set of elements.
    @Bind INPUT_CHANNEL  = 19 end             // A chanel of input data.
    @Bind OUTPUT_CHANNEL = 20 end             // A channel for output data.
    @Bind HASHTABLE      = 21 end             // A table associating keys with values.
    @Bind NEGINT         = 22 end             // Negative integers.
    @Bind FLOAT          = 23 end             // Floating point numbers.
    @Bind CLIENT         = 24 end             // Clients.
    @Bind THREAD         = 26 end             // Threads.
    @Bind DAEMON         = 27 end             // Daemons.
    @Bind BUFFER         = 28 end             // Dynamic arrays.
    @Bind LASTVALUE      = 29 end             // The first unused type tag.
  
    @Bind resources = Table(100) end             // A table of resources used by save and load
    @Bind versions = Seq{"1.0",
                         "1.5",
                         "1.7",
                         "1.8"} end              // A sequence of all released versions so we can compare them.
  
    @Attribute homeDir        : String   (?,!)                          end
    @Attribute docDir         : String   (?,!)                          end
    @Attribute buildDate      : String   (?)                            end
    @Attribute version        : String   (!,?)                          end
    @Attribute user           : String   (!,?)                          end              
    @Attribute preferences    : PreferenceManager = PreferenceManager() end
    @Attribute exception      : Exception                               end
    @Attribute standardOutput : String = "CONSOLE" (!,?)                end
    @Attribute initFile       : String   (!,?)                          end
    @Attribute imageDir       : String   (!,?)                          end
    
    @Constructor(homeDir) ! 
      self.buildDate := self.date()
    end
    
    @Operation bootDir():String
      homeDir + "/Boot"
    end
    
    @Operation busy(label:String)
      // Mosaic defines this to display an appropriate dialog.
      null
    end
    
    @Operation clientNamed(name:String)
      self.clientManager().findClientByName(name)
    end
     
    @Operation date():String
      Kernel_date(true)
    end

    @Operation date(verbose:Boolean):String
      Kernel_date(verbose)
    end
    
    @Operation definePreference(name,value,type,askUser)
      preferences.definePreference(name.asSymbol(),value,type,askUser)
    end
    
    @Operation ensureHeap(amount):Boolean
      // Try to ensure that the required number of heap words are
      // allocated. Returns whether or not it succeeded.
      if self.heapSize() < amount
      then self.extendHeap(amount - self.heapSize())
      else true
      end
    end
    
    @Operation extendHeap(amount):Boolean
      // Tries to extend the heap by the supplied amount and
      // returns a boolean showing whether it succeeded.
      Kernel_extendHeap(amount)
    end
    
    @Operation forwardRefs():Set(ForwardRef)
      Kernel_forwardRefs()
    end
    
    @Operation gc()
      gc()
    end
    
    @Operation gc2()
      gc();
      gc();
      resetOperatorTable()
    end

    @Operation gc2heap()
      // Garbage collects and returns the amount of memory currently allocated.
      gc();
      gc();
      resetOperatorTable();
      Kernel_usedHeap()
    end

    @Operation killProgressDialogs()
      // Remove this....
      null
    end
    
    @Operation load(path:String)
      let fullPath = homeDir + "/" + path
      in if fullPath.fileExists()
         then fullPath.loadBin(true)
         else throw FileDoesNotExist(fullPath)
         end
      end
    end
    
    @Operation hasPreference(name):Boolean
      preferences.hasPreference(name)
    end
    
    @Operation heapSize():Integer
      Kernel_heapSize()
    end
    
    @Operation isFirstVersionLater(v1:String,v2:String):Boolean
      let versions = XMF::versions then
          index1 = versions.indexOf(v1);
          index2 = versions.indexOf(v2)
      in
        index1 > index2
      end
    end
    
    @Operation isValidVersion(v:String):Boolean
      XMF::versions.includes(v)
    end

    @Operation needsGC():Boolean
      Kernel_needsGC()
    end
    
    @Operation memory()
      // Returns a sequence of memory records. Each record is of the form:
      // Seq{time,usedMem,data} where data is a vector of memory usage by
      // type.
      Kernel_memory()
    end
    
    @Operation mineForwardRefs()
    
      // Find forward refs that have been missed by the loader...
      
      let walker = Walkers::Find(@Operation(x) x <> null and x.isKindOf(ForwardRef) end)
      in walker.walk(Root,null);
         @For ref in walker.results() when not self.forwardRefs()->includes(ref) do
           Kernel_setForwardRefs(self.forwardRefs()->including(ref))
         end
      end
    end
    
    @Operation newListeners():Table
      Kernel_newListeners()
    end
    
    @Operation newListenersFor(class:Classifier):Seq(Operation)
      let listeners = self.newListeners()
      in if listeners.hasKey(class)
         then listeners.get(class)
         else Seq{}
         end
      end
    end
    
    @Operation preference(name)
      preferences.preference(name)
    end
    
    @Operation raise(exception:Exception)
      self.exception := exception;
      exception.display()
    end
    
    @Operation resolveRefs()
      // Tries to resolve all the forward refs...
      @For r in self.forwardRefs() do
        r.resolve()
      end;
      gc();
      Kernel_setForwardRefs(self.forwardRefs()->select(r | r.isReallyKindOf(ForwardRef)))
    end
    
    @Operation saveDir():String
      homeDir + "/Save"
    end
    
    @Operation saveState(file:String,restart:Operation):Boolean
    
      @Doc
        Saves the state of the system and returns true.
        When the system is restarted, any arguments are
        passed to the restart operation.
      end
      
      let startup = saveMachineState(file)
      in if startup = true
         then true
         else restart(startup)
         end
      end
    end
    
    @Operation setPreference(name,value)
      preferences.setPreference(name,value)
    end
    
    @Operation sleep()
      // Sends the current thread to sleep. Will continue computation
      // from current point when the thread is woken up.
      Kernel_sleep(self.thread())
    end 
    
    @Operation thread():Thread
      // Returns the current thread.
      Kernel_thread()
    end
    
    @Operation threads():Seq(Thread)
      self.thread().asSeq()
    end
    
    @Operation usedHeap()
      // Returns the amount of memory currently allocated.
      Kernel_usedHeap()
    end
    
  end
  
Root::xmf := XMF("C:/Documents and Settings/Tony Clark/Desktop/eclipse-SDK-3.0M3-win32/eclipse/workspace/xmf");