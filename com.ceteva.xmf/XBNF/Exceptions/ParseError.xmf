parserImport XOCL;

import IO;
import Exceptions;

context Exceptions

  @Class ParseError isabstract extends Exception
  
    @Doc
      A general exception that occurs during parsing. 
      Records the input that has been processed.
    end
    
    @Bind SKIP = 5 end // No of lines pprinted before error position.
    
    @Attribute input    : String  (?,!) end // Input text processed so far.
    @Attribute errorPos : Integer (?,!) end // Position in input text of error.
    
    @Constructor(message,input,errorPos) 
      self.setBacktrace()
    end
    
    @Operation charPos():Integer
    
      // Calculate character position working back SKIP lines
      // from the error position.
      
      let pos = errorPos;
          skipped = 0
      in @While pos > 0 andthen skipped < ParseError::SKIP do
           if input->at(pos) = "\n"->at(0)
           then skipped := skipped + 1
           end;
           pos := pos - 1
         end;
         pos
      end
    end
    
    @Operation pprint():String
      // Returns a user-friendly string describing the error.
      let sout = StringOutputChannel();
          linePos = 0;
          seenError = false;
          charPos = self.charPos() then
          line = self.skippedLines(charPos) + 1
      in format(sout,"// Parse Error Report~%");
         format(sout,"// Generated by ~S on ~S~%~%",Seq{xmf.user(),xmf.date()});
         if charPos > 0
         then format(sout,"// Skipping to parse error...~%~%")
         end;
         format(sout,"[~<4>S] ",Seq{line});
         @While not seenError and charPos < input->size do
           let char = input->at(charPos)
           in if char = "\n"->at(0) or char = "\r"->at(0)
              then 
                linePos := 0;
                line := line + 1;
                format(sout,"\n[~<4>S] ",Seq{line})
              else 
                if charPos < errorPos 
                then linePos := linePos + 1
                end;
                format(sout,"~C",Seq{char})
              end;
              charPos := charPos + 1;
              if charPos >= errorPos
              then seenError := true
              end
           end
         end;
         format(sout,"~%~V^ ~S~%",Seq{linePos + 7,message});
         sout.getString()
      end
    end
    
    @Operation skippedLines(pos:Integer):Integer
      let skippedLines = 0
      in @Count i from 0 to pos - 1 do
           if input->at(i) = "\n"->at(0)
           then skippedLines := skippedLines + 1
           end
         end;
         skippedLines
      end
    end
    
  end
      