parserImport XOCL;
parserImport XBNF::Scanning::Structure;

import IO;
import XBNF::Scanning::Structure;
import Parser::Machine;

context OCL

  @Scanner Scanner
  
    Token("+")
    Token("-")
    Token("/")
    Token("*")
    Token("(")
    Token(")")
    Token(",")
    Token("@")
    Token("::")
    Token(";")
    Token(true)
    Token(false)
    Token("{")
    Token("}")
    Token("|")
    Token("<")
    Token("=")
    Token(">")
    Token(">=")
    Token("<=")
    Token(":")
    Token("!")
    Token("[")
    Token("]")
    Token("[|")
    Token("|]")
    Token("->")
    Token("<-")
    Token(".")
    Token(":=")
    Token("<>")
    Token("<|")
    Token("|>")
    Token("<*")
    Token("<*|")
    Token("*>")
    Token("|*>")
    Token("?")
    Token("#")
 
    Token(if)
    Token(then)
    Token(else)
    Token(elseif)
    Token(end)
    Token(let)
    Token(try)
    Token(catch)
    Token(import)
    Token(in)
    Token(parserImport)
    Token(and)
    Token(or)
    Token(andthen)
    Token(orelse)
    Token(implies)
    Token(not)
    Token(self)
    Token(throw)
    Token(iterate)
    Token(when)
    Token(context)
    
    [a - z A - Z] [a - z A - Z 0 - 9 "_"] * { Name }
    
    "\""  { do Str }
    
    [0-9] * "\." [0-9] [0-9] * { Float }
    
    [0-9] [0-9] * { Int }

    "//" { do CommentLine }

    "/*" { do CommentBlock }

    (" " | "\n" | "\t" | "\r")* { ignore }
    
  end