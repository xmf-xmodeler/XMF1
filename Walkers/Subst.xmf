parserImport XOCL;

import Walkers;

context Walkers

  @Class Subst extends Walker
  
    @Doc
      A substitution walks over an XMF value and replaces all occurrences
      of an 'old' value with a 'new' value. The updated value is returned.
    end
  
    @Attribute new : Element end  // The replacement element.
    @Attribute old : Element end  // The replaced element.
    
    @Constructor(new,old) ! 
      self.initWalker()
    end
  
    @Operation defaultWalk(e:Element,arg:Element):Element
      e
    end
    
    @Operation reWalk(v:Element,arg:Element):Element
      v
    end
    
    @Operation walk(element:Element,arg:Element):Element
      if element = old
      then new
      else 
        super(element,arg)
      end
    end
    
    @Operation walkBoolean(b:Boolean,arg:Element):Element 
      b
    end
     
    @Operation walkInteger(i:Integer,arg:Element):Element 
      i
    end
    
    @Operation walkNull(arg:Element):Element 
      null
    end
    
    @Operation walkObject(o:Object,arg:Element):Element
      if o <> self
      then super(o,arg)
      else o
      end
    end
     
    @Operation walkOperation (o:Operation,arg:Element):Element
      o
    end
    
    @Operation walkPreObject(o:Object,arg:Element)
      null
    end
     
    @Operation walkPostObject(o:Object,arg:Element)
      o
    end
    
    @Operation walkSeq(s:SeqOfElement,arg:Element):Element 
      if not s->isEmpty
      then
        s->head := self.walk(s->head,arg);
        s->tail := self.walk(s->tail,arg)
      end;
      s
    end
     
    @Operation walkSet(s:SetOfElement,arg:Element):Element 
      s->collect(x | self.walk(x,arg))
    end
     
    @Operation walkSlot(o:Object,s:String,arg:Element)
      let value = o.get(s)
      in o.set(s,self.walk(value,arg))
      end
    end
    
    @Operation walkString(s:String,arg:Element):Element 
      s
    end
    
    @Operation walkTable(t:Table,arg:Element):Element
      @For key in t.keys() do
        let value = t.get(key);
            newKey = self.walk(key,arg) then
            newValue = self.walk(value,arg)
        in t.put(newKey,newValue);
           if newKey <> key then t.remove(key) end
        end
      end;
      t
    end
    
    @Operation walkSymbol(s:Symbol,arg:Element):Element 
      s
    end
    
    @Operation walkVector(v:Vector,arg:Element):Element
      @Count i from 0 to v.size() - 1 do
        v.put(i,self.walk(v.ref(i),arg))
      end;
      v
    end
     
  end
     