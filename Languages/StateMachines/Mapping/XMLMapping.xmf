parserImport Parser::BNF;
parserImport XOCL;

import Languages;
import StateMachines;
import Java;
import Parser::BNF;
import XML;
 
context StateMachines
@Package XMLMapping       

  @Doc
    A mapping from Java program structure to XML. Each program element is
    transformed into an XML element. Each class gets a unique identifier
    that is used when references to types occur in the program. Mappings 
    are classes with mapping clauses. A mapping clause consists of a
    pattern and an action with bindings (like XMT). A mapping instance
    transforms a value by applying it to the value. Within the body of
    clauses, the mapping is referenced as 'self'.
  end
      
    
  @Map MapProg(Java::Program)->Element 
      
    @Doc
      Note that XMF mappings have a signature (seen above) that defines
      the types of the inputs (potentially more than one) and the output.
      NB XML is imported at this point so Element is actually XML::Element
      and Attribute is XML::Attribute. In most cases, mappings refer to
      subordinate mappings via attributes. Note that it is convenient to
      initialise the attributes when a new instance is created.
    end
      
    @Attribute mapClass : MapClass = MapClass(self) end
    @Attribute idTable : Table = Table(10) end
        
    @Operation getId(name)
        
      @Doc
        Identifiers for types are alloctated by this mapping.
        All subordinate mappings can reach this mapping via
        their 'owner' slot.
      end
          
      if idTable.hasKey(name) then 
        idTable.get(name)
      else
        idTable.put(name,"id" + idTable.keys()->size.toString());
        idTable.get(name)
      end
    end
        
    @Clause Program2Element 
      Java::Program
        [classes = C]
      do 
      Element
        [tag = "Program",
         attributes = Set{},
         children = E] 
      where 
      E = C->collect(c | mapClass(c)) 
    end
  end
   
  @Map MapClass(Java::Class)->Element
      
    @Attribute owner : MapProg end
    @Attribute mapMember : MapMember = MapMember(self) end
        
    @Constructor(owner) end
        
    @Operation getId(name)
      owner.getId(name)
    end
        
    @Clause Class2Element
      Java::Class
        [name = N,
         members = M] do
      Element
        [tag = "Class",
         attributes = 
           Set{}->including(  
             Attribute
               [name = "name",
                value = N])->including(
                  Attribute
                    [name = "id",
                     value = self.getId(N)]),
         children = E]
      where
      E = M->collect(m | mapMember(m))
    end 
  end
     
  @Map MapMember(Java::Member)->Element
      
    @Attribute owner : MapClass end
    @Attribute mapArg : MapArg = MapArg(self) end
        
    @Constructor(owner) end
        
    @Operation getId(name)
      owner.getId(name)
    end
        
    @Clause Field2Element
      Java::Field
        [name = N,
         type = T] do
      Element
        [tag = "Field",
         attributes = 
           Set{}->including(  
             Attribute
               [name = "name",
                value = N])->including(
                  Attribute
                    [name = "type",
                     value = self.getId(T)]),
        children = Set{}]
    end
        
    @Clause Method2Elements
      Java::Method
        [name = N,
         args = A,
         type = T] do
      Element
        [tag = "Method",
         attributes = 
           Set{}->including(  
             Attribute
               [name = "name",
                value = N])->including(
                  Attribute
                    [name = "type",
                     value = self.getId(T)]),
         children = E]
      where
      E = A->collect(a | mapArg(a))
    end
  end
      
  @Map MapArg(Java::Arg)->Element
      
    @Attribute owner : MapClass end
        
    @Constructor(owner) end
        
    @Operation getId(name)
      owner.getId(name)
    end
        
    @Clause ArgToElement
      Java::Arg
        [name = N,
         type = T] do
      Element
        [tag="Arg",
         attributes = 
           Set{}->including(  
             Attribute
               [name = "name",
                value = N])->including(
                  Attribute
                    [name = "id",
                     value = self.getId(T)]),
         children = Set{}]
    end  
  end
  
  @Operation test()
    let a1 = Java::Arg("a1","C");
        a2 = Java::Arg("a2","D")then
         m = Java::Method("m",Seq{a1,a2},"D");
         f = Java::Field("x","C") then
         d = Java::Class("D",Set{f});
         c = Java::Class("C",Set{f,m}) then
         p = Java::Program(Set{c});
         m = MapProg()
    in m(p).pprint(stdout,0) 
    end
  end 
end
  