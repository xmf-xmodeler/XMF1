parserImport Parser::BNF;

import Languages; import Ada; import Units;

context AdaProgram

  @Grammar extends OCL::OCL.grammar
    
    // Structure 
    AdaProgram ::= pragmas = Pragma* contextSpec = ContextSpec* unit = Unit* {Units::AdaProgram[compilationUnits =
      Set{Units::CompilationUnit[unit = unit->asSet,
                                 contextSpec = Set{Specs::ContextSpec[
                                   useClauses = contextSpec->select(c | c.isKindOf(Units::UseClause)),
                                   withClauses = contextSpec->select(c | c.isKindOf(Units::WithClause))]}]},
                                 pragmas = pragmas->asSet]}.
 
    Pragma ::= 'pragma' name = AdaName {Units::Pragma[name = name]}.

    ContextSpec ::= WithClause | UseClause.

    UseClause ::= 'use' name = AdaName ';' {Units::UseClause[name = name]} |
                  'use' 'type' name = AdaName ';' {Units::UseClause[name = name, type = true]}.

    WithClause ::= 'with' name = AdaName ';' {Units::WithClause[name = name]}.

    Unit ::= PkgBody | SubprogramSpec.

    PkgBody ::= 'package' 'body' name = Name t = Token 'is' declPart = DeclPart* 'end' Name ';' {Bodies::PkgBody[name = name, declPart = declPart, line = t.lineCount,char = t.charCount]}.

    DeclPart ::= DeclPartBody | DeclPartItem.

    DeclPartItem ::= declItem = DeclItem {Bodies::DeclPartItem[declItem = declItem]}.

    DeclItem ::= ObjectDeclSubType | UseClause | WithClause.

    ObjectDeclSubType ::= name = Name ':' subTypeInd = SubTypeInd ':=' initializer = Ada_Expression* ';' {Decls::ObjectDeclSubType[name = name, subTypeInd = subTypeInd, initializer = initializer->asSet]}.

    SubTypeInd ::= name = AdaName {Types::TypeRef::SubTypeInd[name = name]}.

    DeclPartBody ::= body = SubprogramBody {Bodies::DeclPartBody[body = body]}.

    SubprogramBody ::= 
      subprogramSpec = SubprogramSpec 'is' declPart = DeclPart* blockBody = BlockBody 
                       {Bodies::SubprogramBody[blockBody = blockBody, subprogramSpec = subprogramSpec, declPart = declPart]} |
      subProgramSpec = SubProgramSpec ';' {Bodies::SubprogramBody[subprogramSpec = subprogramSpec]}.

    SubprogramSpec ::= ProcedureSpec | FunctionSpec. 

    ProcedureSpec ::= 'procedure' name = Name t = Token parameters = ParameterList {Specs::ProcedureSpec[name = name, parameters = parameters, line = t.lineCount, char = t.charCount]}.

    FunctionSpec ::= 'function' name = Name t = Token parameters = ParameterList returnType = ReturnType {Specs::FunctionSpec[name = name, returnType = returnType, parameters = parameters, line = t.lineCount, char = t.charCount]}.

    ParameterList ::= '(' parameter = Parameter parameters = (';' Parameter)* ')' { Seq{parameter | parameters} } | { Seq{} }.

    Parameter ::= name = Name ':' mode = Mode type = TypeRef {Specs::Parameter[name = name, mode = mode, type = type]}.

    TypeRef ::= SubTypeInd | SubTypeMark.

    SubTypeInd ::= name = AdaName {Types::TypeRef::SubTypeInd[name = name]}.

    Mode ::= 'access' {"access"} | 'out' {"out"} | {"in"}.

    ReturnType ::= 'return' name = AdaName {name} | {null}.

    BlockBody ::= 'begin' statement = Ada_Statement* 'end' Name ';' {statement} | ';' {Seq{}}.

    // Names
    AdaName ::= SimpleName | SelectedComp | Attribute | IndexedComp.

    SimpleName ::= name = Name t = Token {Names::SimpleName[name = name,line = t.lineCount,char = t.charCount]}.

    SelectedComp ::= name = SimpleName '.' scname = Name {Names::SelectedComp[name = name, scname = scname]}.

    IndexedComp ::= (name = SimpleName | name = SelectedComp) '(' value = Value values = (',' Value)* ')' {Names::IndexedComp[name = name, values = values]}.

    Attribute ::= name = Name token = Token '*' attribute = AdaName {Names::Attribute[name = name, attribute = attribute]}.

    //Ada Expressions
    Ada_Expression ::= Ada_NullLiteral | Ada_ExpressionName | Ada_AllocatorName | Ada_Eql.
    
    Ada_Eql ::= left = Ada_ExpressionName op = Ada_EqlOp right = Ada_Expression {Expressions::Binary[left = left, op = op, right = right]}.

    Ada_EqlOp ::= '=' {"="}.

    Ada_AllocatorName ::= 'new' name = SimpleName {Expressions::AllocatorName[name = name]}.

    Ada_ExpressionName ::= name = AdaName {Expressions::ExpressionName[name = name]}.

    Ada_NullLiteral ::= 'null' {Expressions::NullLiteral()}.

    Value ::= ValueCompAssoc.

    ValueCompAssoc ::= choices = Choice* '=>' expr = Ada_Expression {Expressions::ValueCompAssoc[choices = choices, expr = expr]}.

    Choice ::= ChoiceExp.

    ChoiceExp ::= expr = Ada_Expression body = Ada_Statement* {Expressions::ChoiceExp[expr = expr,body = body]}.

    //Ada Statements
    Ada_Statement ::=  ProcedureCall | Return | Ada_Assignment.
    
    Ada_Assignment ::= name = AdaName ':=' expression = Ada_Expression ';' {Statements::Assignment[name = name, expression = expression]}. 

    Return ::= 'return' expr = Ada_Expression* ';' {Statements::Return[expr = expr->asSet]}.

    ProcedureCall ::= name = AdaName ';' {Statements::ProcedureCall[name = name]}.

  end

  AdaProgram.grammar.debug := false;