parserImport XOCL;

import Languages;
import Ada;

context Ada

 @Package Specs
    @Class PackageSpec extends Decls::PackageDecl,Decls::GenericDecl
      @Attribute decs : Seq(Decls::DeclItem) end
      @Attribute private : Set(Specs::PrivatePart) end
      @Attribute pragmas : Set(Units::Pragma) end
      @Attribute name : String end
      @Constructor(name) ! end
      @Operation code(indent:Integer):String
        "package " + name + " is\n\n\n" + " ".repeat(indent + 2) + decs->asSeq->collect(d |
          d.code(indent + 2) + ";")->separateWith("\n\n\n" + " ".repeat(indent + 2)) + if private->isEmpty
        then ""
        else "\n\n\n" + " ".repeat(indent) + private->asSeq->at(0).code(indent + 2)
        end + "\n" + " ".repeat(indent) + "end " + name + ";"
      end
    end
    @Class PrivatePart extends AdaObject
      @Attribute decs : Seq(Decls::DeclItem) end
      @Attribute pragmas : Set(Units::Pragma) end
      @Operation code(indent:Integer):String
        "private\n\n\n" + " ".repeat(indent) + decs->asSeq->collect(d |
          d.code(indent) + ";")->separateWith("\n\n\n" + " ".repeat(indent))
      end
    end
    @Class Parameter extends AdaObject
      @Attribute name : String end
      @Attribute mode : String end
      @Attribute type : Types::TypeRef::TypeRef end
      @Constructor(name) ! end
      @Operation code(indent:Element):Element
        name + " : " + let m = mode->asSeq->excluding("_"->at(0))->asString
        in if m = "inout"
           then "in out "
           else m + " "
           end
        end + type.code(indent)
      end
    end
    @Class ContextSpec extends AdaObject
      @Attribute withClauses : Set(Units::WithClause) end
      @Attribute useClauses : Set(Units::UseClause) end
      @Operation code(indent:Integer):String
        let us = useClauses->asSeq->collect(u |
          u.code(indent)); ws = withClauses->asSeq->collect(w |
          w.code(indent))
        in (us + ws)->separateWith("\n\n\n" + " ".repeat(indent))
        end
      end
    end
    @Class SubprogramSpec extends Decls::SubprogramDecl
      @Attribute parameters : Seq(Specs::Parameter) end
      @Attribute abstract : Boolean end
    end
    @Class ProcedureSpec extends Specs::SubprogramSpec
      @Attribute name : String end
      @Constructor(name) ! end
      @Operation code(indent:Integer):String
        "procedure " + name + "(" + parameters->collect(p |
          p.code(indent))->separateWith("; ") + ")"
      end
    end
    @Class FunctionSpec extends Specs::SubprogramSpec
      @Attribute name : String end
      @Attribute returnType : Names::Name end
      @Constructor(name) ! end
      @Operation code(indent:Integer):String
        "function " + name + "(" + parameters->collect(p |
          p.code(indent))->separateWith("; ") + ") return " + returnType.code(indent) + if abstract
        then " is abstract "
        else ""
        end
      end
    end
    @Class DiscrimSpecs extends Specs::DiscrimPart
      @Attribute discrimSpecs : Seq(Specs::DiscrimSpec) end
      @Operation code(indent:Integer):String
        "(" + discrimSpecs->collect(s |
          s.code(indent))->separateWith(";") + ")"
      end
    end
    @Class DiscrimSpec extends Object
      @Attribute isAccess : Boolean end
      @Attribute names : Seq(Specs::DiscrimName) end
      @Attribute initializer : Set(Expressions::Expression) end
      @Attribute mark : Names::Name end
      @Constructor(mark) ! end
      @Operation code(indent:Integer):String
        names->collect(name |
          name.code(indent))->separateWith(",") + " : " + if isAccess
        then "access"
        else ""
        end + " " + mark.code(indent) + " " + if initializer->isEmpty
        then ""
        else initializer->sel.code(indent)
        end
      end
    end
    @Class DiscrimName extends Object
      @Attribute name : String end
      @Constructor(name) ! end
      @Operation code(indent:Integer):String
        name
      end
    end
    @Class RepSpec extends Decls::DeclItem
    end
    @Class DiscrimPart isabstract extends Object
    end
    @Class DiscrimBox extends Specs::DiscrimPart
      @Operation code(indent:Integer):String
        "(<>)"
      end
    end
  end