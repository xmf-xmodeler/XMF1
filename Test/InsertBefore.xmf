parserImport XOCL;
parserImport BNF;

import Parser::BNF;

import Frames;

// describe an InsertBefore expression within the context of the namespace Frames
context Frames

	// the class InsertBefore provides the Frame import + extend service
    @Class InsertBefore extends Copy
		// create an instance of the class an bind the appropriate attributes
		// note that this class requires the provision of the 'ref' attribute
		@Constructor(theSubframe,ref) end
		
		// grammar describing CS of a (copy and) InsertBefore expression
		// note that the grammar for InsertBefore has a structure identical to InsertAfter
		@Grammar extends OCL::OCL.grammar
			InsertBefore ::= theSubframe=Exp theBreak=Exp elements=Exp*
				{
				import OCL
				in elements->iterate(element concept = 
					[| import Frames in InsertBefore(Set{ <theSubframe> }, Set{ <theBreak> }) end |] |
					[| <concept>.add(<element>) |] )
				end
				}.
		end
		
		// query operation
		@Operation isInsertBefore():Boolean
			true
		end
		
		// return the string representation of the adapted frame
		// copy each FrameExpression belonging to theSubframe until encountering
		// the referenced Break, then insert this frame's FrameExpression
		// before the Break section before continuing to copy all remaining 
		// FrameExpressions belonging to theSubframe
		@Operation asStringSequence():Seq(String)
			self.theSubframe->sel.expr->iterate(item elements=Seq{} | 
				if item = self.ref->sel
				then
					// process the FrameExpression(s) delimited by the InsertBefore
					// then process the FrameExpression(s) delimited by the Break
					elements + 
						self.expr->iterate(fe s=Seq{} | s + fe.asStringSequence()) +
						item.asStringSequence()
				else
					// copy the FrameExpression(s) of the subframe
					elements + item.asStringSequence()
				end)
		end
    end
