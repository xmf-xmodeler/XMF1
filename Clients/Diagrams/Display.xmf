parserImport XOCL;

import Clients;
import Diagrams;
import Menus;

context Diagrams

  @Class Display isabstract extends RightClickable, ContainedDiagramElement
  
    @Attribute x      	: Integer         (?,!) end
    @Attribute y      	: Integer         (?,!) end
    @Attribute width  	: Integer         (?,!) end
    @Attribute height 	: Integer         (?,!) end
    @Attribute hidden 	: Boolean = false (?,!) end // on the diagram but not hidden
    @Attribute shown  	: Boolean = true  (?,!) end // shown
    @Attribute refname  : String          (?,!) end
      
    @Operation clicks(clicks:Integer)
    
      // called when the display has been selected by
      // the user
    
      self
    end
    
    @Operation deepContains(node:Node)
      false
    end
    
    @Operation delete()
      @Command(self) deleteCommand(self) end;
      self.removeFromOwner()
    end
    
    @Operation diagramId()
      if owner <> null
      then owner.diagramId()
      else self.error("Cannot find the diagram id of " + self.toString())
      end
    end
    
    @Operation preferenceChange()
      // overridden by subclasses
      
      self
    end
    
    /* @Operation dispose()
      self.clearRightClickMenu();
      super()
    end */
    
    @Operation disposeId(disposeChildren)
      self.clearRightClickMenu();
      super(disposeChildren)
    end
    
    @Operation expand()
    
      // Called when we want to expand to fit
    
      self.expandWidth();
      self.expandHeight()
    end
    
    @AbstractOp expandHeight()
    
      // Called to expand (if necessary)
      // along the y axis
    
    end
    
    @AbstractOp expandWidth()
    
      // Called to expand (if necessary) 
      // along the x axis
    
    end
    
    @Operation getDisplay(name:String)
    
      // needs to be made more efficent
    
      null
    end
    
    @Operation hide() 
    
      // Cause the display to disappear from the diagram
      
      if not hidden
      then 
        self.hidden := true;
        @Command(self) hideCommand(self) end
      end
    end
    
    @Operation pack()
    
      // Called when we want to expand/shrink to fit.
      
      self.packWidth();
      self.packHeight()
      
    end
    
    @AbstractOp packHeight()
    
      // Called to shrink/expand the display element
      // along the y-axis.
    
    end
    
    @AbstractOp packWidth()
    
      // Called to shrink/expand the display element
      // along the x-axis.
    
    end
    
    @Operation removeTheme()
      self
    end
    
    @Operation show() 
    
      // Cause the display to reappear on the diagram.
      
      if hidden
      then 
        self.hidden := false;
        @Command(self) showCommand(self) end
      end
    end
    
    @AbstractOp maxHeight()
    
      // Calculates the maximum height for the component.
      // This must take into account the relative positioning
      // of the component with respect to its container.
      
    end
    
    @AbstractOp maxWidth()
    
      // Calculates the maximum width for the component.
      // This must take into account the relative positioning
      // of the component with respect to its container.
      
    end
    
    @Operation minHeight()
    
      // Returns the smallest height that the display element
      // can occupy.
      
      0
    end
    
    @Operation minWidth()
    
      // Returns the smallest width that the display element 
      // can ocupy.
      
      0
    end
    
    @Operation move(x,y) 
      if self.x <> x or self.y <> y
      then
        @Command(self) moveCommand(self,x,y) end;
        self.x := x;
        self.y := y
      end
    end
    
    @Operation moveBy(dx,dy)
      self.x := x + dx;
      self.y := y + dy;
      @Command(self) moveCommand(self,x,y) end
    end
    
    @AbstractOp new(parent,setMenu)
    
      // Called when the display element is created in order
      // to inform the client. 'setMenu' determines whether
      // or not the menu will be set and newed.
      
    end
    
    @Operation removeFromOwner()
      if owner <> null
      then owner.remove(self)
      else self.error("Display::removeFromOwner: Cannot find the owner.")
      end
    end
    
    @AbstractOp renew(parent)
    
      // Called when the display is re-initialized after loading
      // from a save archive.
      
    end
    
    @Operation resize(width,height)
    
      // Called when the display element is resized.
      // Update the size attributes, send out the
      // command to resize and inform the parent
      // that the element has resized.
      
      if self.width <> width or self.height <> height
      then
        let width = width.max(self.minWidth());
            height = height.max(self.minHeight())
        in self.setWidth(width);
           self.setHeight(height);
           @Command(self) resizeCommand(self,width,height) end;
           owner.resized(self)
        end
      end
      
    end
    
    @Operation renewHidden()
      if self.hidden
      then
        @Command(self) hideCommand(self) end
      end
    end
    
    @Operation resized(display)
      // self.packWidth();
      // self.packHeight();
      self.expand();
      owner.resized(self)
    end
    
    @Operation sychronise()
    
      // Does nothing by default over ride for concrete instances
    
      self
    end
    
  end