parserImport XOCL;

import Clients;
import IO;
import Forms;

xmf.definePreference("FormHistoryLimit",10,Integer,false);

context Forms

  @Class FormClient extends Client
 
    @Attribute forms        : Seq(Form) = Seq{} (+,-) end
    @Attribute historyTable : Table = Table(10)      end
  
    @Constructor(name)
      self.setCommandInterpreter(FormCommandInterpreter());
      self.setEventHandler(FormEventHandler())
    end
    
    @Operation add(form)
      self.forms := forms + Seq{form};
      form.owner := self
    end

    @Operation addToHistory(form)
      let formType = form.formHistoryType();
          history = Seq{}
      in
        if historyTable.hasKey(formType)
        then
          history := historyTable.get(formType);
          historyTable.remove(formType)         
        end;
        history := self.addToHistory(history,form);
        historyTable.put(formType,history)
      end
    end
    
    @Operation addToHistory(history,form)
      @While history.size() >= xmf.preference("FormHistoryLimit") do
        let dumpedForm = history.last()
        in
          dumpedForm.dispose();
          history := history.excluding(dumpedForm)
        end
      end;
      history := history->prepend(form)
    end

    @Operation clearHistory(remainingForm)
      let formType = remainingForm.formHistoryType() then 
          history = self.getHistory(formType);
          id = remainingForm.id()
      in
        @For form in history do
          if form <> remainingForm
          then
            form.dispose()
          end
        end;
        xmf.clientManager().idManager().reallocateId(remainingForm,id);
        historyTable.remove(formType);
        historyTable.put(formType,Seq{remainingForm})
      end
    end

    @Operation getHistory(formType)
      if historyTable.hasKey(formType)
      then
        historyTable.get(formType)
      else
        null
      end
    end

    @Operation hasForm(form:Form):Boolean
      forms->includes(form)
    end

    @Operation newForm(form)
    
      // Call this when the form is new to the client. This will 
      // cause the form to be displayed.
      
      @AsPacket(commandInterpreter,15)
        form.handleClientNewForm(self); // different types of forms handle newForm differently.
        commandInterpreter.setVisible(form);
        form
      end
    end

    @Operation newFormDefinitely(form)
      self.add(form);
      form.new()
    end

    @Operation preSave()
      @For form in forms do
        form.setOwner(null)
      end
    end
    
    @Operation postSave()
      @For form in forms do
        form.setOwner(self)
      end
    end
    
    @Operation remove(form)
      self.forms := self.forms.excluding(form);
      form.dispose()
    end
    
    @Operation renew()
      @For form in forms do
        form.renew()
      end
    end
    
    @Operation replaceForm(oldForm,newForm,regenerate:Boolean)
      let id = oldForm.id()
      in
        self.add(newForm);
        self.updateForm(oldForm,newForm,regenerate);
        self.remove(oldForm);
        xmf.clientManager().idManager().reallocateId(newForm,id)
      end
    end
    
    @Operation save(form,fileName)
      let out = ElementOutputChannel(FileOutputChannel(fileName))
      in try
           // The form must be de-linked from its
           // parent in order to define the save boundary.
           form.setOwner(null);
           out.write(form,Seq{XCore,Root,Clients,Forms});
           out.close();
           form.setOwner(self)
         catch(exception)
           format(stdout,"~S~%",Seq{exception});
           form.setOwner(self)
         end
      end
    end
    
    @Operation showForm(form)
    
      // Call this to display the form. It will add the form
      // to the list of forms available in the client if
      // necessary.
      
      if self.hasForm(form)
      then self.commandInterpreter().setVisible(form)
      else self.newForm(form)
      end
    end

    @Operation updateForm(oldForm,newForm,regenerate:Boolean)
      let id = oldForm.id()
      in
        xmf.clientManager().idManager().reallocateId(newForm,id);
        commandInterpreter.clearFormCommand(newForm);
        commandInterpreter.setFormText(newForm,newForm.name());
        if regenerate
        then newForm.clearContents();
             newForm.refresh()
        else newForm.renew(false)
        end;
        commandInterpreter.setVisible(newForm)
      end
    end
    
    /* @Operation synchronise()
      
      // Produces an XML document of the forms client's state
      // this is communicated and the remote client is expected
      // it to use as a basis for synchronising its state

      @Command(self) startDocument() end;
      @For form in forms
      do
        form.synchronise()
      end;
      @Command(self) endDocument() end
    end */

  end
