parserImport XOCL;
parserImport XMap;

import Clients;
import Forms;
import XMap;
import PropertyEditors;
import PropertyEditorXCore;

context PropertyEditorXCore

  @Class ConstraintXForm extends ObjectXForm

    @Operation daemons_bodyChanged(e,slot,newValue,oldValue)
      slot:=slot.toString();
      if slot="codeBox" or slot="source" then
        self.form.setTextOut("body",self.form.strippedSource(element.body))
      end
    end

    @Operation daemons_failChanged(e,slot,newValue,oldValue)
      slot:=slot.toString();
      if slot="codeBox" or slot="source" then
        self.form.setTextOut("fail",self.form.strippedSource(element.fail()))
      end
    end

    @Operation daemons_successChanged(e,slot,newValue,oldValue)
      slot:=slot.toString();
      if slot="codeBox" or slot="source" then
        self.form.setTextOut("success",self.form.strippedSource(element.success()))
      end
    end

    @Operation checkDaemons()
      @SlotValueChanged multi once ObjectXForm::daemons_selfNameChanged(element,"name") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ofNameChanged(element.of(),"name") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ofAttributesChanged(element.of(),"attributes") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ofParentsChanged(element.of(),"parents") end;
      @SlotValueChanged multi once ObjectXForm::daemons_ownerChanged(element,"owner") end;
      @SlotValueChanged multi once ConstraintXForm::daemons_bodyChanged(element.body,"*") end;
      @SlotValueChanged multi once ConstraintXForm::daemons_successChanged(element.success(),"*") end;
      @SlotValueChanged multi once ConstraintXForm::daemons_failChanged(element.fail(),"*") end;
      if element.owner() <> null then
        @SlotValueChanged multi once ObjectXForm::daemons_ownerNameChanged(element.owner(),"name") end
      end;
      self
    end

    @Operation removeDaemons()
      self.removeClosingDaemon();
      element.removeDaemonsWithTarget(self,true);
      element.of().removeDaemonsWithTarget(self,true);
      if element.owner() <> null then
        element.owner().removeDaemonsWithTarget(self,true)
      end;
      element.body.removeDaemonsWithTarget(self,true);
      element.success().removeDaemonsWithTarget(self,true);
      element.fail().removeDaemonsWithTarget(self,true);
      self
    end

  end