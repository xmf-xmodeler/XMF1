parserImport XOCL;

import XMap;
import Clients;
import Forms;
import PropertyEditors;
import PropertyEditorXCore;

context PropertyEditorXCore

  @Class XMapClausePE extends AbstractObjectEditor

    @Attribute selfDisplay : SingletonDisplay end
    @Attribute ofDisplay : SingletonDisplay end
    @Attribute ownerDisplay : SingletonDisplay end
    @Attribute sourceDisplay : CodeboxDisplay end

    @Operation new()
      super();
      self.addTextBoxRules()
    end

    @Operation addContents()
      if not self.layoutManager = null then
        layoutManager.add(self.selfDisplays());
        layoutManager.add(Seq{self.sourceDisplay()});
        layoutManager.layoutContents()
      else self.error("Layout manager must be set for " + self.toString())
      end
    end
    
    @Operation refresh()
      super();
      self.addTextBoxRules()
    end

    @Operation selfDisplays()
      self.selfDisplay := self.newSingletonDisplay(XMapClauseSelfTextField,self.element,"self");
      selfDisplay.field
        .setIsEditable(true)
        .setContex(element)
        .setSlotName("self");
      self.ofDisplay := self.newSingletonDisplay(self.element.of(),"of");
      ofDisplay.field
        .setIsEditable(false)
        .setContex(element)
        .setSlotName("of");
      self.ownerDisplay := self.newSingletonDisplay(self.element.owner(),"owner");
      ownerDisplay.field
        .setContex(element)
        .setSlotName("owner");
      Seq{selfDisplay,ofDisplay,ownerDisplay}
    end

    @Operation sourceDisplay()
      let
        source = self.element.source
      then
        code =
          if source.isKindOf(Null)
          then ""
          else source
          end
      then
        textbox = XMapClauseTextBox(0,0,0,0,code,true)
          .setContex(element)
          .setSlotName("source")
      in
        self.sourceDisplay := self.newCodeboxDisplay(textbox,"source");
        sourceDisplay
      end
    end

    @Operation setTextOut(slotName:String,value)
      let valueLabel = value.labelString() in
        if slotName = "source" then
          let textbox = sourceDisplay.textbox
          in
            textbox.setText(valueLabel);
            self.commandInterpreter().setText(textbox,valueLabel)
          end
        else
          let displays = Seq{self.selfDisplay,self.ofDisplay,self.ownerDisplay} in
            @Find(display,displays)
              when display.label.text.toString() = slotName
              do
                let textComponent = display.field in
                  textComponent.element := value;
                  textComponent.setText(valueLabel);
                  self.commandInterpreter().setText(textComponent,valueLabel)
                end
            end
          end
        end;
        self
      end
    end

    @Operation addTextBoxRules()
      let rules = OCL::OCL.grammar.terminals()->asSeq in
        @For rule inSeq rules do
          sourceDisplay.textbox.addWordRule(rule,FormTextBox::blue)
        end
      end;
      self
    end

    @Operation resetClause(clause:Clause)
      self.setElement(clause);
      self.initForm();
      self.commandInterpreter().clearFormCommand(self);
      self.setName("Properties - " + element.labelString());
      self.refresh();
      self.addTextBoxRules()
      //xmf.clientManager().setRecompilingClause(null)
    end

  end