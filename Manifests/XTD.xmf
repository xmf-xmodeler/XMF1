parserImport XOCL;
parserImport Parser::BNF;

import XOCL;
import Exceptions;
import Env;
import Compiler;
import IO;
import Manifests;

context Manifests

  @Class XTD extends File
  
    // An XTD file.
  
    @Grammar extends ManifestAction.grammar
    
      XTD ::= guard = ActionGuard path = MPath loadAction = LoadAction {
      
        XTD(path,guard,loadAction)
        
      }.
       
    end
    
    @Operation binFile(dir:String):String
      dir->subst(xmf.homeDir(),"HOME",true) + "/" + path + ".xtd" 
    end
    
    @Operation build(dir:String)
      null
    end
    
    @Operation deleteBinary(dir:String)
      null
    end
    
    @Operation deref(dir) self end
    
    @Operation load(dir:String,loadSource:Boolean)
      if guard.perform(self,Seq{Seq{2|Root.contents},Seq{2|XCore.contents}},Seq{})
      then 
        let binFile = self.binFile(dir)
        in if binFile.fileExists()
           then xmf.toolManager().loadXTD(binFile)
           else throw FileNotFound(binFile)
           end
        end
      end
    end
    
    @Operation sourceFile(dir:String):String
      self.binFile(dir)
    end
    
    @Operation touch(dir:String,source:Boolean)
      null
    end
    
    @Operation unxip(zipFile:ZipFile,prefix:String)
      let inch = zipFile.inputChannel(prefix + "/" + path) then
          xin = ElementInputChannel(inch)
      in try
           let rootElementType = xin.read()
           in xmf.toolManager().definitionManager().loadDefinition(rootElementType)
           end
         catch(x)
            x.edit();
            xmf.warning("Error loading XTD")
         end
      end
    end
    
  end