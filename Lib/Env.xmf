parserImport XOCL;

context Root

@Package Env 
 
  @Doc
    The Env package implements environments. An environment is a
    lookup table associating keys and values. Environment update
    produces a new environment, making them suitable for systems
    that backtrack for example.
  end
 
  @Class Env isabstract
  
    @Doc
      The class Env is abstract and is the superclass of
      all environment implementation classes. Use Env as the 
      type for all environments.
    end
     
    @Operation add(e:Env):Env
      Pair(self,e)
    end
  
    @Operation lookup(key:Element):Element
    
      @Doc
        lookup(key) returns the value of the key in the environment.
        Causes an error is the key is not associated in the environment.
      end
       
      ("Env::lookup: error " + key + " not found in " + self.toString()).println()
    end
    
    @AbstractOp binding(key):Element
    
      @Doc
        Returns the most recently defined binding for the key or null.
      end
      
    end
    
    @Operation binds(key:Element):Boolean
    
      @Doc
        Returns true when the key is associated in the 
        environment otherwise returns false.
      end
       
      "Env::binds: error".println()
    end
    
    @Operation bind(name:String,value:Element):Env
    
      @Doc
         Adds an association between the key and the value. Returns
         a new environment which is a copy of the receiver exten-ded with
         the association.
      end
          
      let binding = Binding()
      in binding.name := name;
         binding.value := value;
         Pair(binding,self)
      end
    end
    
    @AbstractOp dom():Set(Element)
      @Doc
        Returns the set of elements bound in the environment.
      end
    end
    
    @Operation setValue(key,value):Element
    
      @Doc
        Set will update the current value of a key by side effect.
      end
       
       if self.binds(key)
       then self.binding(key).setValue(value)
       else self.error("Env::setValue: unbound key " + key.toString())
       end
       
    end
  end
  
  @Class NullEnv extends Env 
  
    @Doc
      Represents the empty environment. Create an instance of this
      class then add associations using 'binds'.
    end
     
     @Operation binding(key) 
       null
     end
  
    @Operation binds(name:String):Boolean
      false
    end
    
    @Operation dom()
      Set{}
    end
    
    @Operation toString():String
      "<NullEnv>"
    end
    
  end
  
  @Class Binding extends Env
  
    @Doc
      An internal class to the package Env. Used to represent bindings.
      Always use the 'bind' operation to add bindings to an environment.
    end
  
    @Attribute name:String end
    @Attribute value:Element end
    
    @Constructor(name,value) end
    
    @Operation binding(key)
      if key = name
      then self
      else null
      end
    end
    
    @Operation dom()
      Set{name}
    end
    
    @Operation toString():String
      name.toString() + "->" + value.toString()
    end
    
    @Operation binds(name:String):Boolean
      name = self.name
    end
    
    @Operation lookup(name:String):Element
      if name = self.name
      then value
      else "Binding::lookup"
      end
    end
    
    @Operation setValue(value)
      self.value := value
    end
    
  end
  
  @Class Pair extends Env
  
    @Doc
      Constructs the concatenation of environments e1 and e2.
      Associations in e1 shadow those from e2.
      Used to represent the concatenation of two environments.
    end
  
    @Attribute left:Env end
    @Attribute right:Env end
    
    @Constructor(left,right) end
    
    @Operation binding(key)
      let b = left.binding(key)
      in if b = null
         then right.binding(key)
         else b
         end
      end
    end
    
    @Operation dom()
      left.dom() + right.dom()
    end
    
    @Operation toString():String
      left.toString() + " + " + right.toString()
    end
    
    @Operation binds(name:String):Boolean
      left.binds(name) or right.binds(name)
    end
    
    @Operation lookup(name:String):Element
      if left.binds(name)
      then left.lookup(name)
      else right.lookup(name)
      end
    end
    
  end
  
end
    